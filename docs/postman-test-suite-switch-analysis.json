{
  "info": {
    "name": "SwitchAI - LLM Switch Analysis Test Suite",
    "description": "Comprehensive test suite for the LLM-powered mechanical keyboard switch analysis feature. Covers all functional requirements, query types, error handling, and edge cases.\n\nBase URL: http://localhost:3000/api/analysis\n\nFeatures tested:\n- Single switch analysis (FR3.3)\n- Switch comparisons (FR3.5)\n- Material analysis (FR3.6)\n- Follow-up queries (FR3.4)\n- Intent recognition (FR1.2)\n- Error handling (FR6)\n- Service health checks\n\nTest Categories:\n1. Service Health & Configuration\n2. Intent Recognition Tests\n3. Single Switch Analysis\n4. Switch Comparisons (2-switch and multi-switch)\n5. Material Analysis\n6. Follow-up Queries\n7. Error Handling & Edge Cases\n8. Performance & Load Testing",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "switch-analysis-tests-v1",
    "version": {
      "major": 1,
      "minor": 0,
      "patch": 0
    }
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000/api/analysis",
      "type": "string"
    },
    {
      "key": "conversationId",
      "value": "test-conversation-{{$timestamp}}",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üè• Service Health & Configuration",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            },
            "description": "Verify service health and component status"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has health status', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('status');",
                  "    pm.expect(response).to.have.property('timestamp');",
                  "    pm.expect(response).to.have.property('services');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Service Configuration",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/config",
              "host": ["{{baseUrl}}"],
              "path": ["config"]
            },
            "description": "Get service configuration and capabilities"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has configuration fields', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('version');",
                  "    pm.expect(response).to.have.property('features');",
                  "    pm.expect(response).to.have.property('limits');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Test Endpoint",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/test",
              "host": ["{{baseUrl}}"],
              "path": ["test"]
            },
            "description": "Test endpoint with sample queries and supported intents"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has test data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('sampleQueries');",
                  "    pm.expect(response).to.have.property('supportedIntents');",
                  "    pm.expect(response.sampleQueries).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "description": "Tests for service health, configuration, and basic functionality"
    },
    {
      "name": "üß† Intent Recognition Tests",
      "item": [
        {
          "name": "General Switch Info Intent",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"What are Cherry MX Blue switches like?\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/intent",
              "host": ["{{baseUrl}}"],
              "path": ["intent"]
            },
            "description": "Test intent recognition for general switch information query"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Intent is general_switch_info', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.intent).to.eql('general_switch_info');",
                  "    pm.expect(response.confidence).to.be.above(0.7);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Switch Comparison Intent",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"Compare Gateron Yellow vs Cherry MX Red switches\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/intent",
              "host": ["{{baseUrl}}"],
              "path": ["intent"]
            },
            "description": "Test intent recognition for switch comparison query"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Intent is switch_comparison', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.intent).to.eql('switch_comparison');",
                  "    pm.expect(response.extractedEntities.switches).to.include.members(['Gateron Yellow', 'Cherry MX Red']);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Material Analysis Intent",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"How does POM housing affect switch sound and feel?\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/intent",
              "host": ["{{baseUrl}}"],
              "path": ["intent"]
            },
            "description": "Test intent recognition for material analysis query"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Intent is material_analysis', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.intent).to.eql('material_analysis');",
                  "    pm.expect(response.extractedEntities.materials).to.include('POM');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Follow-up Question Intent",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"Which one would be better for gaming?\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/intent",
              "host": ["{{baseUrl}}"],
              "path": ["intent"]
            },
            "description": "Test intent recognition for follow-up question"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Intent is follow_up_question', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.intent).to.eql('follow_up_question');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "description": "Tests for intent recognition across all supported query types"
    },
    {
      "name": "üîç Single Switch Analysis",
      "item": [
        {
          "name": "Cherry MX Blue Analysis - Basic",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"Tell me about Cherry MX Blue switches\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/query",
              "host": ["{{baseUrl}}"],
              "path": ["query"]
            },
            "description": "Basic single switch analysis for Cherry MX Blue"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has mandatory overview', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('overview');",
                  "    pm.expect(response.overview).to.be.a('string');",
                  "    pm.expect(response.overview.length).to.be.above(10);",
                  "});",
                  "",
                  "pm.test('Response has technical specifications', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('technicalSpecifications');",
                  "});",
                  "",
                  "pm.test('Response has sound and feel analysis', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('soundProfile');",
                  "    pm.expect(response).to.have.property('typingFeel');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Gateron Yellow Analysis - Detailed",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"What are Gateron Yellow switches like for typing and gaming?\",\n  \"preferences\": {\n    \"detailLevel\": \"detailed\",\n    \"technicalDepth\": \"advanced\",\n    \"includeRecommendations\": true,\n    \"focusAreas\": [\"gaming\", \"typing\", \"sound\"]\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/query",
              "host": ["{{baseUrl}}"],
              "path": ["query"]
            },
            "description": "Detailed single switch analysis with specific preferences"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has detailed analysis', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('overview');",
                  "    pm.expect(response).to.have.property('recommendations');",
                  "    pm.expect(response).to.have.property('useCaseSuitability');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Holy Panda Analysis - Premium Switch",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"Analyze Holy Panda switches - sound, feel, and build quality\",\n  \"preferences\": {\n    \"detailLevel\": \"detailed\",\n    \"technicalDepth\": \"intermediate\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/query",
              "host": ["{{baseUrl}}"],
              "path": ["query"]
            },
            "description": "Analysis of premium enthusiast switch"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response includes build quality analysis', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('overview');",
                  "    // Check for premium switch analysis fields",
                  "    const hasQualityAnalysis = response.buildQuality || response.soundProfile || response.typingFeel;",
                  "    pm.expect(hasQualityAnalysis).to.be.ok;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "description": "Tests for single switch analysis with various preferences and switch types"
    },
    {
      "name": "‚öîÔ∏è Switch Comparisons",
      "item": [
        {
          "name": "Two Switch Comparison - Linear vs Tactile",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"Compare Cherry MX Red vs Cherry MX Brown switches\",\n  \"preferences\": {\n    \"detailLevel\": \"detailed\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/query",
              "host": ["{{baseUrl}}"],
              "path": ["query"]
            },
            "description": "Detailed comparison of linear vs tactile switches"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has comparison structure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('overview');",
                  "    pm.expect(response).to.have.property('comparedSwitches');",
                  "    pm.expect(response).to.have.property('comparativeAnalysis');",
                  "});",
                  "",
                  "pm.test('Comparative analysis has required sections', function () {",
                  "    const response = pm.response.json();",
                  "    const analysis = response.comparativeAnalysis;",
                  "    const hasAnalysisSections = analysis.feelingTactility || analysis.soundProfile || analysis.performanceAspects;",
                  "    pm.expect(hasAnalysisSections).to.be.ok;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Gaming-Focused Comparison",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"Which is better for gaming: Gateron Yellow or Cherry MX Speed Silver?\",\n  \"preferences\": {\n    \"focusAreas\": [\"gaming\", \"speed\", \"actuation\"]\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/query",
              "host": ["{{baseUrl}}"],
              "path": ["query"]
            },
            "description": "Gaming-focused switch comparison"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response addresses gaming performance', function () {",
                  "    const response = pm.response.json();",
                  "    const content = JSON.stringify(response).toLowerCase();",
                  "    pm.expect(content).to.include('gaming');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Multi-Switch Comparison - 4 Switches",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"Compare Cherry MX Blue, Cherry MX Brown, Gateron Yellow, and Holy Panda switches\",\n  \"preferences\": {\n    \"maxSwitchesInComparison\": 4,\n    \"detailLevel\": \"moderate\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/query",
              "host": ["{{baseUrl}}"],
              "path": ["query"]
            },
            "description": "Multi-switch comparison with 4 different switches"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response handles multi-switch comparison', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('overview');",
                  "    // Should have some form of comparison structure",
                  "    const hasComparison = response.comparedSwitches || response.categoricalAnalysis || response.decisionFramework;",
                  "    pm.expect(hasComparison).to.be.ok;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "description": "Tests for switch comparison functionality, including 2-switch and multi-switch comparisons"
    },
    {
      "name": "üß™ Material Analysis",
      "item": [
        {
          "name": "POM Housing Material Analysis",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"Explain POM housing material - properties, sound impact, and example switches\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/query",
              "host": ["{{baseUrl}}"],
              "path": ["query"]
            },
            "description": "Analysis of POM housing material properties and applications"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has material analysis structure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('overview');",
                  "    pm.expect(response).to.have.property('materialAnalysis');",
                  "});",
                  "",
                  "pm.test('Material analysis includes key sections', function () {",
                  "    const response = pm.response.json();",
                  "    const analysis = response.materialAnalysis;",
                  "    pm.expect(analysis).to.have.property('materialComposition');",
                  "    pm.expect(analysis).to.have.property('soundImpact');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Polycarbonate vs Nylon Housing Comparison",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"Compare polycarbonate vs nylon housing materials for mechanical switches\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/query",
              "host": ["{{baseUrl}}"],
              "path": ["query"]
            },
            "description": "Comparison of different housing materials"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response covers material comparison', function () {",
                  "    const response = pm.response.json();",
                  "    const content = JSON.stringify(response).toLowerCase();",
                  "    pm.expect(content).to.include('polycarbonate');",
                  "    pm.expect(content).to.include('nylon');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Spring Material Analysis",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"How do different spring materials affect switch feel and longevity?\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/query",
              "host": ["{{baseUrl}}"],
              "path": ["query"]
            },
            "description": "Analysis of spring materials and their impact"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response addresses spring materials', function () {",
                  "    const response = pm.response.json();",
                  "    const content = JSON.stringify(response).toLowerCase();",
                  "    pm.expect(content).to.include('spring');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "description": "Tests for material analysis functionality covering housing, stem, and spring materials"
    },
    {
      "name": "üí¨ Follow-up Queries",
      "item": [
        {
          "name": "Initial Query - Cherry MX Blue",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"Tell me about Cherry MX Blue switches\",\n  \"conversationId\": \"{{conversationId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/query",
              "host": ["{{baseUrl}}"],
              "path": ["query"]
            },
            "description": "Initial query to establish conversation context"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Store response for follow-up",
                  "pm.collectionVariables.set('previousResponse', pm.response.json());"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Follow-up - Gaming Suitability",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"Are they good for gaming?\",\n  \"conversationId\": \"{{conversationId}}\",\n  \"followUpContext\": {\n    \"previousQuery\": \"Tell me about Cherry MX Blue switches\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/query",
              "host": ["{{baseUrl}}"],
              "path": ["query"]
            },
            "description": "Follow-up query about gaming suitability"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has contextual connection', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('overview');",
                  "    // Should reference gaming or the previous context",
                  "    const content = JSON.stringify(response).toLowerCase();",
                  "    pm.expect(content).to.include('gaming');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Follow-up - Alternative Recommendations",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"What would be better alternatives for gaming?\",\n  \"conversationId\": \"{{conversationId}}\",\n  \"followUpContext\": {\n    \"previousQuery\": \"Are they good for gaming?\",\n    \"conversationHistory\": [\n      {\n        \"query\": \"Tell me about Cherry MX Blue switches\",\n        \"response\": \"Previous analysis of Cherry MX Blue switches\",\n        \"timestamp\": \"2024-01-15T10:00:00Z\"\n      }\n    ]\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/query",
              "host": ["{{baseUrl}}"],
              "path": ["query"]
            },
            "description": "Follow-up query asking for alternatives"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response provides alternatives', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('overview');",
                  "    // Should mention alternatives or recommendations",
                  "    const content = JSON.stringify(response).toLowerCase();",
                  "    const hasAlternatives = content.includes('alternative') || content.includes('recommend') || content.includes('better');",
                  "    pm.expect(hasAlternatives).to.be.ok;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "description": "Tests for follow-up query functionality and conversation context maintenance"
    },
    {
      "name": "üö´ Error Handling & Edge Cases",
      "item": [
        {
          "name": "Empty Query",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/query",
              "host": ["{{baseUrl}}"],
              "path": ["query"]
            },
            "description": "Test error handling for empty query"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('error');",
                  "    pm.expect(response.error).to.have.property('code');",
                  "    pm.expect(response.error).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Missing Query Field",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"notQuery\": \"This is not the right field\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/query",
              "host": ["{{baseUrl}}"],
              "path": ["query"]
            },
            "description": "Test error handling for missing query field"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error indicates missing query field', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.error.message).to.include('Query field is required');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Query Too Long",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"This is a very long query that exceeds the maximum allowed length. \" + \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. \".repeat(50)\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/query",
              "host": ["{{baseUrl}}"],
              "path": ["query"]
            },
            "description": "Test error handling for excessively long query"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error indicates query too long', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.error.message).to.include('too long');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Invalid Detail Level",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"Tell me about Cherry MX switches\",\n  \"preferences\": {\n    \"detailLevel\": \"invalid_level\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/query",
              "host": ["{{baseUrl}}"],
              "path": ["query"]
            },
            "description": "Test validation of preference fields"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error indicates invalid detail level', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.error.message).to.include('Invalid detail level');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Nonsensical Query",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"Purple monkey dishwasher elephant switch analysis\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/query",
              "host": ["{{baseUrl}}"],
              "path": ["query"]
            },
            "description": "Test handling of nonsensical queries"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 or 400', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
                  "});",
                  "",
                  "pm.test('Response handles nonsensical query gracefully', function () {",
                  "    const response = pm.response.json();",
                  "    if (pm.response.code === 200) {",
                  "        pm.expect(response).to.have.property('overview');",
                  "    } else {",
                  "        pm.expect(response).to.have.property('error');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Non-Switch Related Query",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"What's the weather like today?\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/query",
              "host": ["{{baseUrl}}"],
              "path": ["query"]
            },
            "description": "Test handling of queries outside the domain"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 or 400', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
                  "});",
                  "",
                  "pm.test('Response handles off-topic query appropriately', function () {",
                  "    const response = pm.response.json();",
                  "    if (pm.response.code === 200) {",
                  "        pm.expect(response).to.have.property('overview');",
                  "    } else {",
                  "        pm.expect(response).to.have.property('error');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "description": "Tests for error handling, input validation, and edge case scenarios"
    },
    {
      "name": "‚ö° Performance & Load Testing",
      "item": [
        {
          "name": "Concurrent Requests Test",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"Compare Cherry MX Red and Gateron Yellow switches\",\n  \"preferences\": {\n    \"detailLevel\": \"detailed\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/query",
              "host": ["{{baseUrl}}"],
              "path": ["query"]
            },
            "description": "Test individual request performance (run multiple iterations to test concurrency)"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('overview');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Complex Multi-Switch Query",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"Provide a comprehensive comparison of Cherry MX Blue, Cherry MX Brown, Cherry MX Red, Gateron Yellow, Gateron Blue, Holy Panda, and Zealios V2 switches including detailed analysis of sound profiles, tactile characteristics, build materials, gaming performance, typing experience, and modification potential\",\n  \"preferences\": {\n    \"detailLevel\": \"detailed\",\n    \"technicalDepth\": \"advanced\",\n    \"maxSwitchesInComparison\": 7,\n    \"includeRecommendations\": true\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/query",
              "host": ["{{baseUrl}}"],
              "path": ["query"]
            },
            "description": "Test performance with complex, resource-intensive query"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Complex query completed in reasonable time', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(60000);",
                  "});",
                  "",
                  "pm.test('Response handles complex query appropriately', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('overview');",
                  "    pm.expect(response.overview.length).to.be.above(100);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "description": "Tests for performance characteristics and system load handling"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set up common variables for all requests",
          "pm.collectionVariables.set('timestamp', Date.now());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Common test assertions for all requests",
          "pm.test('Response has Content-Type header', function () {",
          "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "});",
          "",
          "// Log response time for performance monitoring",
          "console.log('Response time: ' + pm.response.responseTime + 'ms');"
        ]
      }
    }
  ]
} 